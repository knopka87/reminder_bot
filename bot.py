# Reminder Telegram Bot with buttons, repeat options, and delay choices
# Works with python-telegram-bot v20+

import logging
from datetime import datetime, timedelta, time
import pytz
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CallbackContext, CommandHandler,
                          CallbackQueryHandler, MessageHandler, filters, ConversationHandler)
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

import sqlite3
import asyncio

# =============== CONFIGURATION ===============
TOKEN = os.environ.get("TOKEN")
TIMEZONE = pytz.timezone("Europe/Moscow")

# =============== DATABASE ===============
conn = sqlite3.connect("reminders.db", check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS reminders
             (user_id INTEGER, text TEXT, time TEXT, next_time TEXT, repeat TEXT, id INTEGER PRIMARY KEY AUTOINCREMENT)''')
conn.commit()

# =============== LOGGER ===============
logging.basicConfig(level=logging.INFO)

# =============== STATES ===============
TEXT, TYPE, TIME = range(3)

# =============== REMINDER CREATION ===============
user_data_temp = {}

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def new_reminder(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    return TEXT

async def get_text(update: Update, context: CallbackContext):
    user_data_temp[update.effective_user.id] = {"text": update.message.text}
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–æ–µ", callback_data="once"),
                 InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="weekly"),
                 InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", callback_data="monthly")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                                    reply_markup=InlineKeyboardMarkup(keyboard))
    return TYPE

async def get_type(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_data_temp[query.from_user.id]["repeat"] = query.data
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    return TIME

async def get_time(update: Update, context: CallbackContext):
    try:
        dt = datetime.strptime(update.message.text, "%d.%m.%Y %H:%M")
        dt = TIMEZONE.localize(dt)
        data = user_data_temp[update.effective_user.id]
        c.execute("INSERT INTO reminders (user_id, text, time, next_time, repeat) VALUES (?, ?, ?, ?, ?)",
                  (update.effective_user.id, data["text"], dt.isoformat(), dt.isoformat(), data["repeat"]))
        conn.commit()
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /new")
        logging.error(str(e))
    return ConversationHandler.END

# =============== LIST & DELETE ===============
async def list_reminders(update: Update, context: CallbackContext):
    c.execute("SELECT id, text, time, repeat FROM reminders WHERE user_id = ?", (update.effective_user.id,))
    rows = c.fetchall()
    if not rows:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        msg = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for r in rows:
            local_time = datetime.fromisoformat(r[2]).astimezone(TIMEZONE)
            msg += f"\n#{r[0]}: {r[1]} ‚Äî {local_time.strftime('%d.%m.%Y %H:%M')} ({r[3]})"
        await update.message.reply_text(msg)

async def delete_menu(update: Update, context: CallbackContext):
    c.execute("SELECT id, text FROM reminders WHERE user_id = ?", (update.effective_user.id,))
    rows = c.fetchall()
    if not rows:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    keyboard = [[InlineKeyboardButton(f"‚ùå {r[1]}", callback_data=f"del_{r[0]}")] for r in rows]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def delete_by_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    rid = int(query.data.split("_")[1])
    c.execute("DELETE FROM reminders WHERE user_id = ? AND id = ?", (query.from_user.id, rid))
    conn.commit()
    await query.edit_message_text("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

# =============== REMINDER CHECK LOOP ===============
async def reminder_checker(app):
    while True:
        try:
            now = datetime.now(TIMEZONE)
            c.execute("SELECT id, user_id, text, time, next_time, repeat FROM reminders")
            for rid, uid, text, t, next_t, repeat in c.fetchall():
                try:
                    dt = datetime.fromisoformat(t).astimezone(TIMEZONE)
                    next_dt = datetime.fromisoformat(next_t).astimezone(TIMEZONE)
                    if now >= next_dt:
                        kb = [[
                            InlineKeyboardButton("‚è± –ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data=f"snooze_1h_{rid}"),
                            InlineKeyboardButton("‚è± –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data=f"snooze_3h_{rid}"),
                            InlineKeyboardButton("‚è± –î–æ –≤–µ—á–µ—Ä–∞", callback_data=f"snooze_eve_{rid}"),
                            InlineKeyboardButton("‚è± –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—É—Ç–∫–∏", callback_data=f"snooze_tom_{rid}")
                        ],
                        [
                            InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ", callback_data=f"ack_{rid}")
                        ]]
                        msg = await app.bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}", 
                                                       reply_markup=InlineKeyboardMarkup(kb))
                        logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {text} (ID: {rid})")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {rid}: {str(e)}")
            await asyncio.sleep(20)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}")
            await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# =============== ACKNOWLEDGE (READ) ===============
async def acknowledge_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    rid = int(query.data.split("_")[1])

    c.execute("SELECT repeat, time FROM reminders WHERE id = ?", (rid,))
    row = c.fetchone()
    if not row:
        await query.edit_message_text("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        return

    repeat, last_time = row
    if repeat == "once":
        c.execute("DELETE FROM reminders WHERE id = ?", (rid,))
        await query.edit_message_text("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        dt = datetime.fromisoformat(last_time).astimezone(TIMEZONE)
        if repeat == "weekly":
            new_time = dt + timedelta(days=7)
        elif repeat == "monthly":
            new_time = dt + timedelta(days=30)
        else:
            new_time = dt
        c.execute("UPDATE reminders SET time = ?, next_time = ? WHERE id = ?", (new_time.isoformat(), new_time.isoformat(), rid))
        await query.edit_message_text("üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥.")
    conn.commit()

# =============== SNOOZE ===============
async def snooze_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_")
    mins = {"1h": 60, "3h": 180, "eve": (datetime.now(TIMEZONE).replace(hour=20, minute=0) - datetime.now(TIMEZONE)).seconds // 60, "tom": (datetime.now(TIMEZONE).replace(hour=9, minute=0) + timedelta(days=1) - datetime.now(TIMEZONE)).seconds // 60}
    offset = mins[parts[1]]
    rid = int(parts[2])
    new_time = datetime.now(TIMEZONE) + timedelta(minutes=offset)
    c.execute("UPDATE reminders SET next_time = ? WHERE id = ?", (new_time.isoformat(), rid))
    conn.commit()
    await query.edit_message_text("‚è± –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ.")

# =============== HEALTH CHECK ===============
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/health":
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Not Found")
            
    def log_message(self, format, *args):
        return  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤

def start_health_check():
    server = HTTPServer(('0.0.0.0', 8000), HealthCheckHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    return server

# =============== MAIN ===============
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("list", list_reminders))
app.add_handler(CommandHandler("delete", delete_menu))
app.add_handler(CallbackQueryHandler(delete_by_button, pattern=r"^del_"))
app.add_handler(CallbackQueryHandler(snooze_callback, pattern=r"^snooze_"))
app.add_handler(CallbackQueryHandler(acknowledge_callback, pattern=r"^ack_"))

conv = ConversationHandler(
    entry_points=[CommandHandler("new", new_reminder)],
    states={
        TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_text)],
        TYPE: [CallbackQueryHandler(get_type, pattern=r"^(once|weekly|monthly)$", block=False)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
    },
    fallbacks=[]
)
app.add_handler(conv)

# Background reminder checker
if __name__ == "__main__":
    async def run():
        # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
        health_server = start_health_check()
        logging.info("Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        
        async with app:
            reminder_task = asyncio.create_task(reminder_checker(app))
            await app.start()
            await app.updater.start_polling()

            try:
                stop = asyncio.Future()
                await stop
            except (KeyboardInterrupt, SystemExit):
                logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
            finally:
                reminder_task.cancel()
                try:
                    await reminder_task
                except asyncio.CancelledError:
                    pass
                await app.stop()
                health_server.shutdown()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
                health_server.server_close()
                logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    asyncio.run(run())
